{
    "cells": [
        {
            "cell_type": "code",
            "execution_count": 2,
            "id": "f565f8be-e9a6-4fc2-81ec-958bf61bb182",
            "metadata": {},
            "outputs": [],
            "source": [
                "# Copyright (C) 2023 qBraid\n",
                "# Copyright (C) IBM\n",
                "#\n",
                "# This file is part of the qBraid-SDK.\n",
                "#\n",
                "# The qBraid-SDK is free software released under the GNU General Public License v3\n",
                "# or later. This specific file, adapted from Qiskit, is dual-licensed under both the\n",
                "# Apache License, Version 2.0, and the GPL v3. You may not use this file except in\n",
                "# compliance with the applicable license. You may obtain a copy of the Apache License at\n",
                "#\n",
                "# http://www.apache.org/licenses/LICENSE-2.0\n",
                "#\n",
                "# This file includes code adapted from Qiskit (https://github.com/Qiskit/qiskit-ibm-provider)\n",
                "# with modifications by qBraid. The original copyright notice is included above.\n",
                "# THERE IS NO WARRANTY for the qBraid-SDK, as per Section 15 of the GPL v3.",
            ],
        },
        {
            "cell_type": "markdown",
            "id": "b07834ff-27d3-4f84-8d41-2653f554a92f",
            "metadata": {},
            "source": [
                "# qBraid-SDK Braket on IonQ device Tutorial: Quantum Teleportation "
            ],
        },
        {
            "cell_type": "markdown",
            "id": "c63b76c0-03c0-468a-b446-883c74ae602a",
            "metadata": {},
            "source": [
                "Per usual, install the qBraid SDK environment on Lab, and use the qBraid CLI to enable [Quantum Jobs](https://docs.qbraid.com/en/latest/lab/quantumjobs.html):"
            ],
        },
        {
            "cell_type": "code",
            "execution_count": 3,
            "id": "e2ed181d-fd24-4e77-bf68-8e82eb4b6e1f",
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "\u001b[0;35mYou have already enabled qBraid Quantum Jobs in the qbraid_sdk environment.\u001b[0m\n"
                    ],
                }
            ],
            "source": ["!qbraid jobs enable qbraid_sdk"],
        },
        {
            "cell_type": "markdown",
            "id": "eec54c24-6ac4-4d04-9ef6-1a75440d336c",
            "metadata": {},
            "source": [
                "You can check that the `jobs` keyword next to the qBraid SDK environment is now green."
            ],
        },
        {
            "cell_type": "code",
            "execution_count": 4,
            "id": "5f35b403-6b7d-4b12-92ab-0a94df2658dc",
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "# installed environments:\n",
                        "#\n",
                        "default                  \u001b[0;31mjobs\u001b[0m  /opt/.qbraid/environments/qbraid_000000\n",
                        "aws_braket               \u001b[0;32mjobs\u001b[0m  /home/jovyan/.qbraid/environments/aws_braket_kwx6dl\n",
                        "qbraid_sdk               \u001b[0;32mjobs\u001b[0m  /home/jovyan/.qbraid/environments/qbraid_sdk_9j9sjy\n",
                        "\n",
                    ],
                }
            ],
            "source": ["!qbraid envs list"],
        },
        {
            "cell_type": "markdown",
            "id": "d3b024e5-0cba-45d8-ab2e-e5ca2e7575a9",
            "metadata": {},
            "source": [
                "It's important to import the qBraid SDK only *after* you have enabled quantum jobs."
            ],
        },
        {
            "cell_type": "code",
            "execution_count": 5,
            "id": "cb0f44a1-5852-4c81-b930-85b2ea40cda4",
            "metadata": {},
            "outputs": [
                {
                    "data": {"text/plain": ["'0.4.4.dev20230816194153'"]},
                    "execution_count": 5,
                    "metadata": {},
                    "output_type": "execute_result",
                }
            ],
            "source": ["import qbraid\n", "\n", "qbraid.__version__"],
        },
        {
            "cell_type": "markdown",
            "id": "86b99f2b-49fb-4f53-a794-d964ba997a2c",
            "metadata": {},
            "source": ["# Creating the Circuit"],
        },
        {
            "cell_type": "code",
            "execution_count": 6,
            "id": "6884eb6c-8e0f-466f-b220-828d7998d508",
            "metadata": {},
            "outputs": [],
            "source": ["from qiskit import QuantumCircuit"],
        },
        {
            "cell_type": "markdown",
            "id": "fc1be341-7e17-4ac7-b5f2-06951f2a3e34",
            "metadata": {},
            "source": [
                "The code for this circuit was taken from IBMs Quantum Teleportation tutorial. Check out their [tutorial](https://www.youtube.com/watch?v=mMwovHK2NrE&t) for a more in depth explanation. The idea is that we want to transport a qubit state from one person (Alice) to another (Bob). We utlizie an entangled Bell state to do so."
            ],
        },
        {
            "cell_type": "code",
            "execution_count": 7,
            "id": "b16d8330-66c2-4bbf-bf6a-799a55e8e3ac",
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "<qiskit.circuit.instructionset.InstructionSet at 0x7f2ea8550580>"
                        ]
                    },
                    "execution_count": 7,
                    "metadata": {},
                    "output_type": "execute_result",
                }
            ],
            "source": [
                "circuit = QuantumCircuit(3,3)\n",
                "\n",
                "circuit.x(0)\n",
                "\n",
                "#Controlled Hadamard gates are not part of the quantum gates supported by the Harmony device\n",
                "circuit.ch(0, 1)\n",
                "circuit.ch(0, 1)\n",
                "#----\n",
                "\n",
                "circuit.barrier()\n",
                "circuit.h(1)\n",
                "circuit.cx(1,2)\n",
                "\n",
                "circuit.barrier() \n",
                "\n",
                "\n",
                "circuit.cx(0,1)\n",
                "circuit.h(0)\n",
                "\n",
                "circuit.barrier() \n",
                "\n",
                "\n",
                "circuit.measure([0, 1], [0, 1]) \n",
                "circuit.barrier() \n",
                "\n",
                "circuit.cx(1, 2)\n",
                "circuit.cz(0, 2)\n",
                "\n",
                "circuit.measure([2], [2])",
            ],
        },
        {
            "cell_type": "code",
            "execution_count": 8,
            "id": "5662eb64-3296-4413-9418-754955f8a9ac",
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "image/png": "",
                        "text/plain": ["<Figure size 1458.05x367.889 with 1 Axes>"],
                    },
                    "execution_count": 8,
                    "metadata": {},
                    "output_type": "execute_result",
                }
            ],
            "source": ["%matplotlib inline\n", "circuit.draw(output='mpl')"],
        },
        {
            "cell_type": "markdown",
            "id": "c58aab66-29e3-4997-96da-458e51149f0d",
            "metadata": {},
            "source": [
                "Notice that we've added two controlled-Hadamard gates: applying two controlled-Hadamards back to back is equivalent to the identity gate. Theoretically, this is the same circuit, however controlled-Hadamard gates are not supported on the IonQ computer. We will see how we can leverage qBraid's capabilities to still run this circuit on IonQ's computer."
            ],
        },
        {
            "cell_type": "markdown",
            "id": "a9cdeff3-809b-41e2-8ab3-a8b4b9343d22",
            "metadata": {},
            "source": ["We can observe the supported gate set with the following:"],
        },
        {
            "cell_type": "code",
            "execution_count": 9,
            "id": "8c816874-99ba-4788-a115-35e13528025d",
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "Quantum Gates supported by Harmony:\n",
                        " ['x', 'y', 'z', 'rx', 'ry', 'rz', 'h', 'cnot', 's', 'si', 't', 'ti', 'v', 'vi', 'xx', 'yy', 'zz', 'swap']\n",
                    ],
                }
            ],
            "source": [
                "from braket.aws import AwsDevice\n",
                "\n",
                'device = AwsDevice("arn:aws:braket:us-east-1::device/qpu/ionq/Harmony")\n',
                "\n",
                "# get device name\n",
                "device_name = device.name\n",
                "# show supportedQuantumOperations (supported gates for a device)\n",
                "device_operations = device.properties.dict()['action']['braket.ir.openqasm.program']['supportedOperations']\n",
                "print('Quantum Gates supported by {}:\\n {}'.format(device_name, device_operations))",
            ],
        },
        {
            "cell_type": "markdown",
            "id": "6088ee7e-07cd-4377-8036-5fcaee685592",
            "metadata": {},
            "source": [
                "We initially programmed this circuit in qiskit, but we want to test braket circuit capabilties on the IonQ computer. Thus, we can use qBraid's circuit wrapper to convert the circuit to braket:"
            ],
        },
        {
            "cell_type": "code",
            "execution_count": 10,
            "id": "08db9529-4401-403c-9e4f-097842325939",
            "metadata": {},
            "outputs": [],
            "source": ["from qbraid import circuit_wrapper"],
        },
        {
            "cell_type": "code",
            "execution_count": 11,
            "id": "14236621-3cc1-47ef-aec4-6961a6fa8c66",
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "<class 'braket.circuits.circuit.Circuit'>\n",
                        "T  : |0|1|2|3|4|5|6|7|\n",
                        "                      \n",
                        "q0 : -X-C-C-----C-H-C-\n",
                        "        | |     |   | \n",
                        "q1 : ---H-H-H-C-X-C-|-\n",
                        "              |   | | \n",
                        "q2 : ---------X---X-Z-\n",
                        "\n",
                        "T  : |0|1|2|3|4|5|6|7|\n",
                    ],
                }
            ],
            "source": [
                "wrapped_circuit = circuit_wrapper(circuit)\n",
                'braket_circuit = wrapped_circuit.transpile("braket")\n',
                "print(type(braket_circuit))\n",
                "print(braket_circuit)",
            ],
        },
        {
            "cell_type": "markdown",
            "id": "da695df1-b5ea-4252-b0fc-041018d3d652",
            "metadata": {},
            "source": ["# Attemping to Run the Circuit without qBraid"],
        },
        {
            "cell_type": "code",
            "execution_count": 12,
            "id": "54aa2d88-bdd4-4a10-99e1-97c628e7cdb6",
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": ["Unsupported gates, circuit cannot be run!\n"],
                }
            ],
            "source": [
                'device = AwsDevice("arn:aws:braket:us-east-1::device/qpu/ionq/Harmony")\n',
                "try:\n",
                "    job = device.run(braket_circuit, shots=10)\n",
                "except:\n",
                '    print("Unsupported gates, circuit cannot be run!")',
            ],
        },
        {
            "cell_type": "markdown",
            "id": "f67a7473-b60a-4818-b534-a0c076dd6cc4",
            "metadata": {},
            "source": ["## Running on an IonQ Device via qBraid"],
        },
        {
            "cell_type": "markdown",
            "id": "60c4168c-5e97-417a-9466-7156d48cd76d",
            "metadata": {},
            "source": [
                "Let's check which devices (specifically IonQ ones) are online, and also find their device IDs:"
            ],
        },
        {
            "cell_type": "code",
            "execution_count": 13,
            "id": "f77c89e4-1a66-4e1f-94f4-a89565513ba7",
            "metadata": {},
            "outputs": [],
            "source": ["from qbraid import get_devices"],
        },
        {
            "cell_type": "code",
            "execution_count": 14,
            "id": "c9b12da2-fe9e-4c03-b48d-a6ab0ec2bc44",
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": [
                            "<h3>Supported Devices</h3><table><tr>\n",
                            "    <th style='text-align:left'>Provider</th>\n",
                            "    <th style='text-align:left'>Name</th>\n",
                            "    <th style='text-align:left'>qBraid ID</th>\n",
                            "    <th style='text-align:left'>Status</th></tr>\n",
                            "    <tr>\n",
                            "        <td style='text-align:left'>IonQ</td>\n",
                            "        <td style='text-align:left'>Aria-1</td>\n",
                            "        <td style='text-align:left'><code>aws_ionq_aria1</code></td>\n",
                            "        <td><span style='color:red'>○</span></td></tr>\n",
                            "        <tr>\n",
                            "        <td style='text-align:left'>IonQ</td>\n",
                            "        <td style='text-align:left'>Harmony</td>\n",
                            "        <td style='text-align:left'><code>aws_ionq_harmony</code></td>\n",
                            "        <td><span style='color:red'>○</span></td></tr>\n",
                            "        <tr><td colspan='4'; style='text-align:right'>Device status updated 0 minutes ago</td></tr></table>",
                        ],
                        "text/plain": ["<IPython.core.display.HTML object>"],
                    },
                    "metadata": {},
                    "output_type": "display_data",
                }
            ],
            "source": ['get_devices(filters={"provider": "IonQ"})'],
        },
        {
            "cell_type": "markdown",
            "id": "79586114-de39-4c10-aa42-58cdcb5645bd",
            "metadata": {},
            "source": ["Let's check how many credits we have left:"],
        },
        {
            "cell_type": "code",
            "execution_count": 15,
            "id": "056a8e55-717d-4be0-8f53-ade9b0601c44",
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "\u001b[0;35mYou have \u001b[0m1000.00\u001b[0;35m remaining qBraid credits.\u001b[0m\n"
                    ],
                }
            ],
            "source": ["!qbraid jobs get-credits"],
        },
        {
            "cell_type": "markdown",
            "id": "f45049f2-ed77-4b89-8602-f4f719269ad8",
            "metadata": {},
            "source": [
                "In this tutorial we'll use IonQ's Harmony computer. Now we can use qBraid's [device wrapper](https://docs.qbraid.com/en/latest/sdk/devices.html#device-wrapper) to run a job on an IonQ device. The device wrapper adds a layer of abstraction, allowing us to run a braket circuit on an IonQ quantum computer. "
            ],
        },
        {
            "cell_type": "code",
            "execution_count": 16,
            "id": "6206cd7e-7d83-43fd-b343-46e9e55737a3",
            "metadata": {},
            "outputs": [],
            "source": ["from qbraid import device_wrapper"],
        },
        {
            "cell_type": "code",
            "execution_count": 17,
            "id": "91751155-9197-4d26-88ba-7a7779e0a084",
            "metadata": {},
            "outputs": [],
            "source": [
                'ionq_device_id = "aws_ionq_harmony" #aws_ionq_harmony is the qBraid ID for the Harmony Computer \n',
                "device = device_wrapper(ionq_device_id) ",
            ],
        },
        {
            "cell_type": "markdown",
            "id": "680db65d-fba6-4e69-b298-bc1888ae451e",
            "metadata": {},
            "source": [
                "Feel free to change the number of shots to reduce the number of qBraid credits:"
            ],
        },
        {
            "cell_type": "code",
            "execution_count": 18,
            "id": "d407a1e1-32da-4cf9-848e-35d3886c2470",
            "metadata": {},
            "outputs": [
                {
                    "data": {"text/plain": ["<JobStatus.QUEUED: 'job is queued'>"]},
                    "execution_count": 18,
                    "metadata": {},
                    "output_type": "execute_result",
                }
            ],
            "source": [
                "job = device.run(braket_circuit, shots=50)\n",
                "job.status() #checking the status of our job",
            ],
        },
        {
            "cell_type": "code",
            "execution_count": 20,
            "id": "85effdf7-bee4-42a9-b29e-4a2513f10866",
            "metadata": {},
            "outputs": [],
            "source": ["from qbraid import get_jobs, job_wrapper"],
        },
        {
            "cell_type": "code",
            "execution_count": 21,
            "id": "e16619e5-d780-476a-a5bd-66df76e8c073",
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": [
                            "<h3>Quantum Jobs</h3><table><tr>\n",
                            "    <th style='text-align:left'>qBraid ID</th>\n",
                            "    <th style='text-align:left'>Submitted</th>\n",
                            "    <th style='text-align:left'>Status</th></tr>\n",
                            "    <tr>\n",
                            "        <td style='text-align:left'>aws_ionq_harmony-pak225-qjob-o2jap9csrr7kldwfsswn</td>\n",
                            "        <td style='text-align:left'>2023-08-17T07:00:49.884Z</td>\n",
                            "        <td style='text-align:left'><span style='color:blue'>QUEUED</span></td></tr>\n",
                            "        <tr>\n",
                            "        <td style='text-align:left'>ibm_q_lima-pak225-qjob-brs3h5n60mwbt65q5mkv</td>\n",
                            "        <td style='text-align:left'>2023-08-17T06:55:16.950Z</td>\n",
                            "        <td style='text-align:left'><span style='color:blue'>QUEUED</span></td></tr>\n",
                            "        <tr>\n",
                            "        <td style='text-align:left'>ibm_q_lima-pak225-qjob-bxfu142k4ad7s2ve37mx</td>\n",
                            "        <td style='text-align:left'>2023-08-16T23:28:11.794Z</td>\n",
                            "        <td style='text-align:left'><span style='color:green'>COMPLETED</span></td></tr>\n",
                            "        <tr>\n",
                            "        <td style='text-align:left'>aws_ionq_harmony-pak225-qjob-91vedne55b87zssd1qvk</td>\n",
                            "        <td style='text-align:left'>2023-08-16T23:24:24.657Z</td>\n",
                            "        <td style='text-align:left'><span style='color:blue'>QUEUED</span></td></tr>\n",
                            "        <tr>\n",
                            "        <td style='text-align:left'>aws_sv_sim-pak225-qjob-xb5tp2utfnkmlelq6pjw</td>\n",
                            "        <td style='text-align:left'>2023-08-16T23:22:25.464Z</td>\n",
                            "        <td style='text-align:left'><span style='color:green'>COMPLETED</span></td></tr>\n",
                            "        <tr>\n",
                            "        <td style='text-align:left'>aws_sv_sim-pak225-qjob-sup7vf4xfdis54jfpaap</td>\n",
                            "        <td style='text-align:left'>2023-08-16T22:13:10.976Z</td>\n",
                            "        <td style='text-align:left'><span style='color:green'>COMPLETED</span></td></tr>\n",
                            "        <tr>\n",
                            "        <td style='text-align:left'>aws_sv_sim-pak225-qjob-vmf97vqkllxkwftoyksi</td>\n",
                            "        <td style='text-align:left'>2023-08-16T21:53:53.876Z</td>\n",
                            "        <td style='text-align:left'><span style='color:green'>COMPLETED</span></td></tr>\n",
                            "        <tr>\n",
                            "        <td style='text-align:left'>aws_sv_sim-pak225-qjob-jviqbvtu4fod1765bu7p</td>\n",
                            "        <td style='text-align:left'>2023-08-16T21:49:40.008Z</td>\n",
                            "        <td style='text-align:left'><span style='color:green'>COMPLETED</span></td></tr>\n",
                            "        <tr>\n",
                            "        <td style='text-align:left'>aws_ionq_harmony-pak225-qjob-d1a6fq734y99wbseucob</td>\n",
                            "        <td style='text-align:left'>2023-08-15T07:20:06.653Z</td>\n",
                            "        <td style='text-align:left'><span style='color:green'>COMPLETED</span></td></tr>\n",
                            "        <tr>\n",
                            "        <td style='text-align:left'>aws_ionq_harmony-pak225-qjob-r8zj59u11rj5bdrnei08</td>\n",
                            "        <td style='text-align:left'>2023-08-09T03:04:40.100Z</td>\n",
                            "        <td style='text-align:left'><span style='color:green'>COMPLETED</span></td></tr>\n",
                            "        <tr><td colspan='4'; style='text-align:right'>Displaying 10 most recent jobs</td></tr></table>",
                        ],
                        "text/plain": ["<IPython.core.display.HTML object>"],
                    },
                    "metadata": {},
                    "output_type": "display_data",
                }
            ],
            "source": ["get_jobs()"],
        },
        {
            "cell_type": "code",
            "execution_count": 22,
            "id": "4734efd6-46b6-49b3-af12-d5f9a6844655",
            "metadata": {},
            "outputs": [],
            "source": [
                "job = job_wrapper('aws_ionq_harmony-pak225-qjob-91vedne55b87zssd1qvk')"
            ],
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "id": "62bda1e9-ff71-4c19-8072-a43a77906a4a",
            "metadata": {},
            "outputs": [],
            "source": [
                "result = job.result()\n",
                "counts = result.measurement_counts()\n",
                "print(counts)",
            ],
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "id": "3b3f7529-f37d-4346-8ad4-869cbe4e664a",
            "metadata": {},
            "outputs": [],
            "source": ["result.plot_counts()"],
        },
        {
            "cell_type": "markdown",
            "id": "c4bc13a0-f7dd-40ae-a5a3-9d42d4507443",
            "metadata": {},
            "source": [
                "We see that we've correctly teleported the state, since c2 (the leading qubit) is far more likely to be 1, and we teleported the |1> state! Note that for this tutorial we only run 50 shots (and thus observe messy data) due to our credit limit."
            ],
        },
        {
            "cell_type": "markdown",
            "id": "25882feb-924c-4fa4-bb8a-7b65001cd63d",
            "metadata": {},
            "source": [
                "We can also run our circuit on a simulator to get cleaner results:"
            ],
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "id": "e535ad1b-3254-4432-89a3-96959f924998",
            "metadata": {},
            "outputs": [],
            "source": [
                'aws_device_id = "aws_sv_sim" #aws_sv_sim is the qBraid id for the SV1 Computer \n',
                "device = device_wrapper(aws_device_id) \n",
                "sim_job = device.run(qiskit_circuit, shots=1000)\n",
                "sim_job.status() #checking the status of our job\n",
                "result_sim = sim_job.result()\n",
                "counts_sim = result.measurement_counts()\n",
                "\n",
                "result_sim.plot_counts()",
            ],
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "id": "16d17131-3807-4502-bc46-01277339d226",
            "metadata": {},
            "outputs": [],
            "source": [],
        },
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3 [qBraid]",
            "language": "python",
            "name": "python3_qbraid_sdk_9j9sjy",
        },
        "language_info": {
            "codemirror_mode": {"name": "ipython", "version": 3},
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.9.12",
        },
    },
    "nbformat": 4,
    "nbformat_minor": 5,
}
